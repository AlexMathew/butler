{"name":"Butler","tagline":"Python Dictionaries and Lists on Steroids","body":"Butler\r\n======\r\n\r\n##Python Dictionaries and Lists on Steroids\r\n\r\nButler is the missing library that adds _additional_ and _necessary_ features to Python ```dict``` as well as ```list```. It helps you traversing nested lists/dicts better. Butler tries to be closely resemble the cpython dictionary functions, but has got a ton of helper functions\r\n\r\n\r\n__Butler is NOT python dict 2.0__. It is a helper library that provides a clean API for traversing nested lists and dicts.\r\n\r\n\r\n__Butler suppresses errors and exceptions.__ Its good as well as bad depends on what you expect from it. Also on the kind of data you are working with. If its a huge document(eg., __JSON__ ) with nullable fields and a lot of multi-level lists, ```Butler``` is designed for you.\r\n\r\n\r\n##Installation\r\n\r\n```\r\npip install python-butler\r\n```\r\n\r\nor you can download the source from https://github.com/atmb4u/butler/ and run\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\n\r\n##Quick Start  Guide\r\n\r\n\r\n```python\r\n>>> data = {'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8],\r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}  \r\n# define dictionary - can be a parsed output of json.loads or json.load\r\n\r\n>>> quick = Butler(data)  # create an instance of Butler with the data\r\n\r\n>>> quick.path_exists(['c', 'g', 0, 'k'])  # tells you if the element exists\r\nFalse\r\n# fetches the value on the path, similar to ```<dict>.get()``` but more featured\r\n\r\n>>> quick.get(['c', 'g', 0])\r\n{'h': 8, 'i': 9, 'j': 10}\r\n\r\n# it can take an argument called default which is taken as the default value if not found.\r\n>>> quick.get(['c', 'g', 5], default=0)\r\n0\r\n>>> quick.find(['b'])\r\n12\r\n>>> quick.findall(['b'])\r\n[12, 2]\r\n>>> quick.key_exists(['n'])\r\nTrue\r\n\r\n>>> quick.data  # chokes out the object which is being manipulated\r\n{'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8],\r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}\r\n```\r\n\r\n\r\n##Key Functions\r\n\r\n__get()__ - returns the value at the given path\r\n\r\n__set()__ - returns True on updating the data, False on failure\r\n\r\n__path_exists()__ - returns if the specified path exists\r\n\r\n__findall()__ - returns a list of values for matching keys\r\n\r\n__find()__ - returns the first match for the keys\r\n\r\n__key_exists()__ - returns True or False, on the availability of the key anywhere in the document\r\n\r\n__data__ - outputs the object which is being manipulated\r\n\r\n\r\n__path__\r\n========\r\n\r\nFor dictionaries, path holds the keys for the element and for lists its the index for the element in the list.\r\n\r\n\r\n##get()\r\nGet the element by specifying path with keys to that value.\r\n\r\n\t* INPUT: __path__ - a list of keys for the dictionary or list\r\n\r\n\t* OUTPUT: Returns the corresponding value if found, else None. \r\n\t\t- No Exception raised\r\n\r\n```python\r\n>>> data1 = Butler({\"key\": \"value\"})\r\n>>> data1.get([\"key\"])\r\n'value'\r\n>>> data2 = Butler([1, 2, 4, 5, [10, 20, 30, 40, 50]])\r\n>>> data2.get([4, 3])\r\n40\r\n>>> data2.get([4, 9])\r\n\r\n>>> data3 = Butler(\"Hello world\")\r\n>>> data3.get([6])\r\n```\r\n\r\n\r\n##set()\r\nSet the element by specifying path with keys to that value. Used to write to Butler objects. Makes it very easy to update and insert leaf nodes.\r\n\r\n\t* INPUT: __path__ - a list of keys for the dictionary or list\r\n\t         __value__ - Value to be set/update/append to the element in the matching location\r\n\r\n\t* OUTPUT:\r\n        Returns True - Successful update or create\r\n        Returns False - Failed due to non-existent path\r\n\r\n\r\n```python\r\n>>> a = {'b': {'c': {'d': 1, 's': 1001}}}\r\n>>> data = Butler(a)\r\n>>> data.set(['b', 'c', 'd'], 1001 )\r\nTrue\r\n>>> a\r\n{'b': {'c': {'s': 1001, 'd': 1001}}}\r\n>>> data.set(['b','c','s'], [10,100])\r\nTrue\r\n>>> a\r\n{'b': {'c': {'s': [10, 100], 'd': 1001}}}\r\n>>> data.data\r\n{'b': {'c': {'s': [10, 100], 'd': 1001}}}\r\n>>> data.set(['b','q','s'], [10,100])\r\nFalse\r\n>>> a\r\n{'b': {'c': {'s': [10, 100], 'd': 1001}}}\r\n>>> data.data\r\n{'b': {'c': {'s': [10, 100], 'd': 1001}}}\r\n>>> b = [[1, 2, 3], 4, 5]\r\n>>> data = Butler(b)\r\n>>> data.set([0], 1001)\r\nTrue\r\n>>> b\r\n[[1, 2, 3, 1001], 4, 5]\r\n>>> c = [[1, 2, 3], 4, 5]\r\n>>> data = Butler(c)\r\n>>> data.set([0,2], 1001)\r\nTrue\r\n>>> c\r\n[[1, 2, 1001], 4, 5]\r\n```\r\n\r\n##path_exists()\r\n\r\n\t* INPUT: list containing path to an expected key\r\n\r\n\t* OUTPUT: True if found, False if NOT.\r\n\r\n\r\n```python\r\n>>> data = {'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8], \r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}\r\n\r\n>>> quick = Butler(data)\r\n\r\n>>> quick.path_exists(['c','g',0,'k'])\r\nFalse\r\n>>> quick.path_exists(['c','g',0,'j'])\r\nTrue\r\n```\r\n\r\n\r\n##findall()\r\nFind all the values with the same key in a multi-level dictionary\r\n\r\n\t* INPUT: key to be searched in the dictionary\r\n\r\n\t* OUTPUT: ```list``` of all values with matching keys\r\n\r\n```python\r\n>>> data = {'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8], \r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}\r\n\r\n>>> quick = Butler(data)\r\n\r\n>>> quick.findall('a')\r\n```\r\n\r\n##find()\r\nGets the first value matching the argument key\r\n\r\n\t*INPUT: key to be searched in the dict or list (list position in case of list)\r\n\r\n\t*OUTPUT: first result matching the key in the entire dictionary\r\n\r\n\r\n```python\r\n>>> data = {'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8], \r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}\r\n\r\n>>> quick = Butler(data)\r\n\r\n>>> quick.find('a')\r\n1\r\n>>> quick.find('e')\r\n5\r\n>>> quick.find('w')\r\n```\r\n\r\n##key_exists()\r\n\r\nUses find function to see if the requested key is in the dictionary\r\nReturns: ```True``` or ```False```\r\n\r\n```python\r\n>>> data = {'a':1, 'b':2, 'c': {'d': 4, 'e': 5, 'f': [6, 7, 8], \r\n... 'g':[{'h': 8, 'i': 9, 'j': 10}, {'a':11,\r\n... 'b': 12, 'c': 13}]}, 'n': [14, 15, 16, 17, 18]}\r\n\r\n>>> quick = Butler(data)\r\n\r\n>>> quick.key_exists('a')\r\nTrue\r\n>>> quick.key_exists('w')\r\nFalse\r\n```\r\n","google":"UA-49752530-1","note":"Don't delete this file! It's used internally to help with page regeneration."}